
<h1>Section 4 - get next page</h1>
<div class="steps-container show">
    <div class="step">
        <div tabindex="1" class="step-txt">
            <h4>01</h4>
            <p>
                Open the scrapy shell, fetch the url and find the next page btn element
            </p>
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
fetch('https://books.toscrape.com/')</pre>
            </div>
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
response.css('li.next a').arttrib['href']</pre>
            </div>
            <p>or</p>
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
response.css('li.next a::attr(href)').get()</pre>
            </div>
        </div>
        <div class="step-img">
            <img class="lg-enlarge"
                src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-01-getNextPage/images/01-02.png">
        </div>
    </div>
    <div class="step-col-start" style="justify-content: flex-start !important; 
    align-items: flex-start; ">
        <div tabindex="1" class="step-txt" style="border: none;">
            <h4>02 - full code</h4>
            <div class="code-container" style="width: 90vmax !important;">
                <pre style="width: 60vmax !important;" tabindex="1" class="copy-code long-code tabindex1">
import scrapy
class BookspiderSpider(scrapy.Spider):
    name = 'bookspider'
    allow_domains = ['books.toscrape.com']
    start_urls = ['http://books.toscrape.com/']
    
    def parse(self,response):
        books = response.css('article.product_pod')
        for book in books:
            relative_url = book.css('h3 a::attr(href)').get()
            if 'catalogue' in relative_url:
                next_book_url = 'http://books.toscrape.com/' + relative_url
            else:
                next_book_url = 'http://books.toscrape.com/catalogue/' + relative_url
            yield response.follow(next_book_url,callback=self.parse_book_page)

        next_page = response.css('li.next a::attr(href)').get()
        if next_page is not None:
            if 'catalogue' in next_page:
                next_page_url = 'http://books.toscrape.com/' + next_page
            else:
                next_page_url = 'http://books.toscrape.com/catalogue/' + next_page
            yield response.follow(next_page_url, callback=self.parse)
    def parse_book_page(self,response):
        table_rows = response.css('table > tr')
        yield {
            'url': response.url,
            'title': response.css('.product_main h1::text').get(),
            'product_type': table_rows[1].css('td::text').get(),
            'price_excl_tax': table_rows[2].css('td::text').get(),
            'price_incl_tax': table_rows[3].css('td::text').get(),
            'tax': table_rows[4].css('td::text').get(),
            'availabiity': table_rows[5].css('td::text').get(),
            'stars': response.css('p.star-rating').attrib['class'],
            'catagory': response.xpath("//ul[@class='breadcrumb']/li[@class='active']/preceding-sibling::li[1]/a/text()").get(),
            'price': response.css('p.price_color ::text').get()
        }
                
                </pre>
            </div>
        </div>
    </div>
    
</div>

